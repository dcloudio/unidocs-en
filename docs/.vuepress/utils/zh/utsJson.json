{"String":{"length":{"name":"### length","description":"\n返回字符串的 UTF-16 码元长度。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"includes":{"name":"### includes(searchString, position?)","description":"\n如果 searchString 作为此对象转换为 String 的结果的子字符串出现在大于或等于position的一个或多个位置，则返回 true；否则，返回 false。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchString | string | 是 | 要在 str 中搜索的字符串。不能是正则表达式。 |\n| position | number | 否 | 在字符串中开始搜索 searchString 的位置。（默认为 0。） |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果在给定的字符串中找到了要搜索的字符串（包括 searchString 为空字符串的情况），则返回 true，否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"endsWith":{"name":"### endsWith(searchString, endPosition?)","description":"\nendsWith() 方法用于判断一个字符串是否以指定字符串结尾，如果是则返回 true，否则返回 false。该方法区分大小写。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchString | string | 是 | 要搜索的作为结尾的字符串，不能是正则表达式。所有非正则表达式的值都会被强制转换为字符串。 |\n| endPosition | number | 否 | 可选，预期找到 searchString 的末尾位置（即 searchString 最后一个字符的索引加 1）。默认为 str.length。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果被检索字符串的末尾出现了指定的字符串（包括 searchString 为空字符串的情况），则返回 true；否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"repeat":{"name":"### repeat(count)","description":"\nrepeat() 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| count | number | 是 | 介于 0 和 +Infinity 之间的整数。表示在新构造的字符串中重复了多少遍原字符串。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 包含指定字符串的指定数量副本的新字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"startsWith":{"name":"### startsWith(searchString, position?)","description":"\nstartsWith() 方法用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 true 或 false。这个方法区分大小写。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchString | string | 是 | 要搜索的子字符串。 |\n| position | number | 否 | 在 str 中搜索 searchString 的开始位置，默认值为 0。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果在字符串的开头找到了给定的字符则返回 true；否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"at":{"name":"### at(index)","description":"\n方法接受一个整数值，并返回一个新的 String，该字符串由位于指定偏移量处的单个 UTF-16 码元组成","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| index | number | 是 | 字符指定偏移量处，允许正整数和负整数，负整数从字符串中的最后一个字符开始倒数。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| string | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"charAt":{"name":"### charAt(pos)","description":"\n返回一个由给定索引处的单个 UTF-16 码元构成的新字符串。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| pos | number | 是 | 要返回的字符的索引，从零开始。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 返回一个字符串，该字符串表示指定 index 处的字符（恰好是一个 UTF-16 码元）。如果 index 超出了 0 – str.length - 1 的范围，charAt() 将返回一个空字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"charCodeAt":{"name":"### charCodeAt(index)","description":"\n返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| index | number | 是 | 一个大于等于 0，小于字符串长度的整数。如果不是一个数值，则默认为 0。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 指定 index 处字符的 UTF-16 代码单元值的一个数字；如果 index 超出范围，charCodeAt() 返回 NaN。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"concat":{"name":"### concat(strings)","description":"\n将字符串参数连接到调用的字符串，并返回一个新的字符串。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| strings | string\\[\\] | 是 | T要连接到 str 的一个或多个字符串。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个包含所提供的多个字符串文本组合的新字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"indexOf":{"name":"### indexOf(searchString, position?)","description":"\n在字符串中搜索指定子字符串，并返回其第一次出现的位置索引。它可以接受一个可选的参数指定搜索的起始位置，如果找到了指定的子字符串，则返回的位置索引大于或等于指定的数字。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchString | string | 是 | 要搜索的子字符串。 |\n| position | number | 否 | 该方法返回指定子字符串在大于或等于 position 位置的第一次出现的索引，默认为 0。如果 position 大于调用字符串的长度，则该方法根本不搜索调用字符串。如果 position 小于零，该方法的行为就像 position 为 0 时一样。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 查找的字符串 searchValue 的第一次出现的索引，如果没有找到，则返回 -1。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"lastIndexOf":{"name":"### lastIndexOf(searchString, position?)","description":"\n搜索该字符串并返回指定子字符串最后一次出现的索引。它可以接受一个可选的起始位置参数，并返回指定子字符串在小于或等于指定数字的索引中的最后一次出现的位置。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchString | string | 是 | 要搜索的子字符串。 |\n| position | number | 否 | 该方法返回指定子字符串在小于或等于 position 的位置中的最后一次出现的索引，默认为 +Infinity。如果 position 大于调用字符串的长度，则该方法将搜索整个字符串。如果 position 小于 0，则行为与 0 相同，即该方法只在索引 0 处查找指定的子字符串。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 如果找到了 searchString，则返回最后一次出现的索引，否则返回 -1。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"replace":{"name":"### replace(searchValue, replaceValue)","description":"\n返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。模式可以是一个字符串或者一个正则表达式。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchValue | string \\| RegExp | 是 | RegExp: 一个RegExp 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。string: 一个将被 newSubStr 替换的 字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。 |\n| replaceValue | string | 是 | 用于替换掉第一个参数在原字符串中的匹配部分的字符串。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个部分或全部匹配由替代模式所取代的新的字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"replace_1":{"name":"### replace(searchValue, replacer)","description":"\n返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值是一个每次匹配都要调用的回调函数。如果pattern是字符串，则仅替换第一个匹配项。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchValue | string \\| RegExp | 是 | RegExp: 一个RegExp 对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。string: 一个将被 newSubStr 替换的 字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。 |\n| replacer | (substring : string, ...args : any\\[\\]) =\\> string | 是 | 一个用来创建新子字符串的函数，该函数的返回值将替换掉第一个参数匹配到的结果。在iOS中replacer的第二个参数是字符串数组而非可变参数。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个部分或全部匹配由替代模式所取代的新的字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"search":{"name":"### search(regexp)","description":"\nsearch() 方法执行正则表达式和 String 对象之间的一个搜索匹配。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| regexp | string \\| RegExp | 是 | 一个正则表达式（regular expression）对象。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引;否则，返回 -1。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"slice":{"name":"### slice(start?, end?)","description":"\nslice() 方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| start | number | 否 | 可选。从该索引（以 0 为基数）处开始提取原字符串中的字符。如果值为负数，会被当做 strLength + beginIndex 看待，这里的strLength 是字符串的长度（例如，如果 beginIndex 是 -3 则看作是：strLength - 3） |\n| end | number | 否 | 可选。在该索引（以 0 为基数）处结束提取字符串。如果省略该参数，slice() 会一直提取到字符串末尾。如果该参数为负数，则被看作是 strLength + endIndex，这里的 strLength 就是字符串的长度 (例如，如果 endIndex 是 -3，则是，strLength - 3)。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 返回一个从原字符串中提取出来的新字符串 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"split":{"name":"### split(separator, limit?)","description":"\nsplit() 方法接受一个模式，通过搜索模式将字符串分割成一个有序的子串列表，将这些子串放入一个数组，并返回该数组。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| separator | string \\| RegExp | 是 | 描述每个分割应该发生在哪里的模式。 |\n| limit | number | 否 | 一个非负整数，指定数组中包含的子字符串的数量限制。当提供此参数时，split 方法会在指定 separator 每次出现时分割该字符串，但在已经有 limit 个元素时停止分割。任何剩余的文本都不会包含在数组中。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string\\[\\] | 在给定字符串中出现 separator 的每一个点上进行分割而成的字符串数组。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"substring":{"name":"### substring(start, end?)","description":"\n返回一个字符串在开始索引到结束索引之间的一个子集，或从开始索引直到字符串的末尾的一个子集。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| start | number | 是 | 要截取的第一个字符的索引，该索引位置的字符作为返回的字符串的首字母。 |\n| end | number | 否 | 可选。一个 0 到字符串长度之间的整数，以该数字为索引的字符不包含在截取的字符串内。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 包含给定字符串的指定部分的新字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toLowerCase":{"name":"### toLowerCase()","description":"toLowerCase() 会将调用该方法的字符串值转为小写形式，并返回。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个新的字符串，表示转换为小写的调用字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toUpperCase":{"name":"### toUpperCase()","description":"\n将调用该方法的字符串转为大写形式并返回（如果调用该方法的值不是字符串类型会被强制转换）。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个新的字符串，表示转换为大写的调用字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"trim":{"name":"### trim()","description":"\n从字符串的两端清除空格，返回一个新的字符串，而不修改原始字符串。此上下文中的空格是指所有的空白字符（空格、tab、不换行空格等）以及所有行终止符字符（如 LF、CR 等）。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个表示 str 去掉了开头和结尾的空白字符后的新字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"Number":{"toFixed":{"name":"### toFixed(fractionDigits?)","description":"\n使用定点表示法来格式化一个数值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| fractionDigits | number | 否 | 小数点后数字的个数；介于 0 到 20（包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 使用定点表示法表示给定数字的字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toInt":{"name":"### toInt()","description":"\n返回一个Int 值","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Int | 返回 number 对应的 Int 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toFloat":{"name":"### toFloat()","description":"\n返回一个Float 值","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Float | 返回 number 对应的 Float 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toDouble":{"name":"### toDouble()","description":"\n返回一个 Double 值","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Double | 返回 number 对应的 Double 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toUInt":{"name":"### toUInt()","description":"\n返回一个 UInt 值","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| UInt | 返回 number 对应的 UInt 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toByte":{"name":"### toByte()","description":"\n将当前的Number数据转换为Byte表示，如果超出Byte最大值表示范围，会得到溢出后余数表示, app-andorid平台特有。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Byte | 返回 number 对应的 Byte 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | x | x | x |\n","itemType":"method"},"toLong":{"name":"### toLong()","description":"\n将当前的Number数据转换为Long表示，如果超出Long最大值表示范围，会得到溢出后余数表示, app-andorid平台特有。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Long | 返回 number 对应的 Long 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | x | x | x |\n","itemType":"method"},"toShort":{"name":"### toShort()","description":"\n将当前的Number数据转换为Short表示，如果超出Short最大值表示范围，会得到溢出后余数表示, app-andorid平台特有。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Short | 返回 number 对应的 Short 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | x | x | x |\n","itemType":"method"},"toUShort":{"name":"### toUShort()","description":"\n将当前的 Number 数据转换为 UShort 表示，如果超出 UShort 最大值表示范围，会得到溢出后余数表示, app-andorid平台特有。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| UShort | 返回 number 对应的 UShort 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | x | x | x |\n","itemType":"method"},"toULong":{"name":"### toULong()","description":"\n将当前的 Number 数据转换为 ULong 表示，如果超出 ULong 最大值表示范围，会得到溢出后余数表示, app-andorid平台特有。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| ULong | 返回 number 对应的 ULong 值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | x | x | x |\n","itemType":"method"},"from":{"name":"### from(value)","description":"\n通过 Int | Float | Double | Int64 | Int32 | Int16 | Int8 | UInt | UInt64 | UInt32 | UInt16 | UInt8  | Byte | Short | Long 类型创建一个 number","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | Int \\| Float \\| Double \\| Int64 \\| Int32 \\| Int16 \\| Int8 \\| UInt \\| UInt64 \\| UInt32 \\| UInt16 \\| UInt8  \\| Byte \\| Short \\| Long | 是 | 必填。一个 Swfit 或者 Kottlin 专有数字类型的值。其中 Swift 平台 支持 Int, Float, Double, Int64, Int32, Int16, Int8, UInt,  UInt64, UInt32, UInt16, UInt8。Kottlin 平台支持  Int, Float, Double, Byte, Short, Long |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Number | 返回 number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | 3.9.0 | x |\n","itemType":"method"}},"Math":{"E":{"name":"### E","description":"\nMath.E 属性表示自然对数的底数（或称为基数），e，约等于 2.718。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"LN10":{"name":"### LN10","description":"\nMath.LN10 属性表示 10 的自然对数，约为 2.302\n","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"LN2":{"name":"### LN2","description":"\nMath.LN2 属性表示 2 的自然对数，约为 0.693","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"LOG2E":{"name":"### LOG2E","description":"\nMath.LOG2E 属性表示以 2 为底数，e 的对数，约为 1.442","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"LOG10E":{"name":"### LOG10E","description":"\nMath.LOG10E 属性表示以 10 为底数，e 的对数，约为 0.434","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"PI":{"name":"### PI","description":"\nMath.PI 表示一个圆的周长与直径的比例，约为 3.14159","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"SQRT1_2":{"name":"### SQRT1_2","description":"\nMath.SQRT1_2 属性表示 1/2 的平方根，约为 0.707","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"SQRT2":{"name":"### SQRT2","description":"\nMath.SQRT2 属性表示 2 的平方根，约为 1.414","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"clz32":{"name":"### clz32(x)","description":"\nMath.clz32() 函数返回一个数字在转换成 32 无符号整形数字的二进制形式后，开头的 0 的个数","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"sign":{"name":"### sign(x)","description":"\nMath.sin() 函数返回一个数值的正弦值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值（以弧度为单位）。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"log10":{"name":"### log10(x)","description":"\nMath.log10() 函数返回一个数字以 10 为底的对数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 任意数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"log2":{"name":"### log2(x)","description":"\nMath.log2() 函数返回一个数字以 2 为底的对数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 任意数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"log1p":{"name":"### log1p(x)","description":"\nMath.log1p() 函数返回一个数字加 1 后的自然对数 (底为 E), 既log(x+1).","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 任意数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"expm1":{"name":"### expm1(x)","description":"\nMath.expm1() 函数返回 E^x - 1, 其中 x 是该函数的参数，E 是自然对数的底数 2.718281828459045。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 任意数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"cosh":{"name":"### cosh(x)","description":"\nMath.cosh() 函数返回数值的双曲余弦函数","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 数值。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"sinh":{"name":"### sinh(x)","description":"\nMath.sinh() 函数返回一个数字 (单位为角度) 的双曲正弦值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 任意数字 (单位为度). |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"tanh":{"name":"### tanh(x)","description":"\nMath.tanh() 函数将会返回一个数的双曲正切函数值","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 待计算的数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"acosh":{"name":"### acosh(x)","description":"\nMath.acosh() 函数返回一个数的反双曲余弦值","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"asinh":{"name":"### asinh(x)","description":"\nMath.asinh() 返回一个数值的反双曲正弦值","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"atanh":{"name":"### atanh(x)","description":"\nMath.atanh() 函数返回一个数值反双曲正切值","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"trunc":{"name":"### trunc(x)","description":"\nMath.trunc() 方法会将数字的小数部分去掉，只保留整数部分。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 任意数字 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"fround":{"name":"### fround(x)","description":"\nMath.fround() 可以将任意的数字转换为离它最近的单精度浮点数形式的数字。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个 Number。若参数为非数字类型，则会被转投成数字。无法转换时，设置成NaN。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | 3.9.0 | x |\n","itemType":"method"},"abs":{"name":"### abs(x)","description":"\nRMath.abs(x) 函数返回一个数字的绝对值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数字 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | x 的绝对值。如果 x 是负数（包括 -0），则返回 -x。否则，返回 x | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"acos":{"name":"### acos(x)","description":"\nMath.acos() 返回一个数的反余弦值（单位为弧度）","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值. |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"asin":{"name":"### asin(x)","description":"\nMath.asin() 方法返回一个数值的反正弦（单位为弧度）","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"atan":{"name":"### atan(x)","description":"\nMath.atan() 函数返回一个数值的反正切（以弧度为单位）","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"atan2":{"name":"### atan2(y, x)","description":"\nMath.atan2() 返回从原点 (0,0) 到 (x,y) 点的线段与 x 轴正方向之间的平面角度 (弧度值)，也就是 Math.atan2(y,x)","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| y | number | 是 | 数值 |\n| x | number | 是 | 数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"ceil":{"name":"### ceil(x)","description":"\nMath.ceil() 函数总是四舍五入并返回大于等于给定数字的最小整数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"cos":{"name":"### cos(x)","description":"\nMath.cos() 函数返回一个数值的余弦值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个以弧度为单位的数值。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"exp":{"name":"### exp(x)","description":"\nMath.exp() 函数返回 e^x，x 表示参数，e 是欧拉常数（Euler's constant），自然对数的底数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"floor":{"name":"### floor(x)","description":"\nMath.floor() 函数总是返回小于等于一个给定数字的最大整数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"log":{"name":"### log(x)","description":"\nMath.log() 函数返回一个数的自然对数","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数字。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"max":{"name":"### max(values)","description":"\nMath.max() 函数返回作为输入参数的最大数字，如果没有参数，则返回 -Infinity","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| values | number\\[\\] | 是 | 0 个或多个数字，将在其中选择，并返回最大的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 给定数值中最大的数。如果任一参数不能转换为数值，则返回 NaN。如果没有提供参数，返回 -Infinity。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"min":{"name":"### min(values)","description":"\nMath.min() 函数返回作为输入参数的数字中最小的一个，如果没有参数，则返回 Infinity。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| values | number\\[\\] | 是 | 0 个或多个数字，将在其中选择，并返回最小值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 给定数值中最小的数。如果任一参数不能转换为数值，则返回 NaN。如果没有提供参数，返回 Infinity。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"pow":{"name":"### pow(x, y)","description":"\nMath.pow() 函数返回基数（base）的指数（exponent）次幂，即 base^exponent。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 基数 |\n| y | number | 是 | 指数 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"random":{"name":"### random()","description":"\nMath.random() 函数返回一个浮点数，伪随机数在范围从0 到小于1，也就是说，从 0（包括 0）往上，但是不包括 1（排除 1），然后您可以缩放到所需的范围。实现将初始种子选择到随机数生成算法;它不能被用户选择或重置。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 一个浮点型伪随机数字，在0（包括 0）和1（不包括）之间。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"round":{"name":"### round(x)","description":"\nMath.round() 函数返回一个数字四舍五入后最接近的整数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 给定数字的值四舍五入到最接近的整数。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"sin":{"name":"### sin(x)","description":"\nMath.sin() 函数返回一个数值的正弦值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值（以弧度为单位）。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"sqrt":{"name":"### sqrt(x)","description":"\nMath.sqrt() 函数返回一个数的平方根","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"tan":{"name":"### tan(x)","description":"\nMath.tan() 方法返回一个数值的正切值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| x | number | 是 | 一个数值，表示一个角（单位：弧度）。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"Date":{"toString":{"name":"### toString()","description":"\n返回一个字符串，以本地的时区表示该 Date 对象。","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| string | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"toDateString":{"name":"### toDateString()","description":"\n以美式英语和人类易读的形式返回一个日期对象日期部分的字符串。","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| string | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getTime":{"name":"### getTime()","description":"\n返回从UTC时间1970年1月1日午夜开始以毫秒为单位存储的时间值。","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getFullYear":{"name":"### getFullYear()","description":"\n根据本地时间返回指定日期的年份。此方法替代 getYear() 。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 根据当地时间，返回一个对应于给定日期的年份数字。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getMonth":{"name":"### getMonth()","description":"\n根据本地时间，返回一个指定的日期对象的月份，为基于 0 的值（0 表示一年中的第一月）。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 一个 0 到 11 的整数值：0 代表一月份，1 代表二月份，2 代表三月份，依次类推。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getDate":{"name":"### getDate()","description":"\n根据本地时间，返回一个指定的日期对象为一个月中的哪一日（从 1--31）。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 返回一个 1 到 31 的整数值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getDay":{"name":"### getDay()","description":"\n根据本地时间，返回一个具体日期中一周的第几天，0 表示星期天。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 根据本地时间，返回一个 0 到 6 之间的整数值，代表星期几：0 代表星期日，1 代表星期一，2 代表星期二，依次类推。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getHours":{"name":"### getHours()","description":"\n根据本地时间，返回一个指定的日期对象的小时。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 返回一个 0 到 23 之间的整数值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getMinutes":{"name":"### getMinutes()","description":"\n根据本地时间，返回一个指定的日期对象的分钟数。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 返回一个 0 到 59 的整数值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"getSeconds":{"name":"### getSeconds()","description":"\n根据本地时间，返回一个指定的日期对象的秒数。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 返回一个 0 到 59 的整数值。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setTime":{"name":"### setTime(time)","description":"\n以一个表示从 1970-1-1 00:00:00 UTC 计时的毫秒数为来为 Date 对象设置时间。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| time | number | 是 | 一个整数，表示从 1970-1-1 00:00:00 UTC 开始计时的毫秒数。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | UTC 1970 年 1 月 1 日 00:00:00 与更新日期之间的毫秒数（实际上是自变量的值）。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setMilliseconds":{"name":"### setMilliseconds(ms)","description":"\n根据本地时间设置一个日期对象的豪秒数。如果指定的数字超出了合理范围，则日期对象的时间信息会被相应地更新。例如，如果指定了 1005，则秒数加 1，豪秒数为 5。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| ms | number | 是 | 一个 0 到 999 的数字，表示豪秒数。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 返回更新后的时间距 1970 年 1 月 1 日 00:00:00 的毫秒数。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setSeconds":{"name":"### setSeconds(sec, ms?)","description":"\n根据本地时间设置一个日期对象的秒数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| sec | number | 是 | 一个 0 到 59 的整数。 |\n| ms | number | 否 | 一个 0 到 999 的数字，表示微秒数。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setMinutes":{"name":"### setMinutes(min, sec?, ms?)","description":"\n根据本地时间为一个日期对象设置分钟数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| min | number | 是 | 一个 0 到 59 的整数，表示分钟数。 |\n| sec | number | 否 | 一个 0 到 59 的整数，表示秒数。如果指定了 sec 参数，则必须同时指定 min 参数。 |\n| ms | number | 否 | 一个 0 到 999 的数字，表示微秒数，如果指定了 ms 参数，则必须同时指定 min 和 sec 参数。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setHours":{"name":"### setHours(hours, min?, sec?, ms?)","description":"\n根据本地时间为一个日期对象设置小时数，返回从 1970-01-01 00:00:00 UTC 到更新后的 日期 对象实例所表示时间的毫秒数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| hours | number | 是 | 必填，一个 0 到 23 的整数，表示小时。 |\n| min | number | 否 | 可选，一个 0 到 59 的整数，表示分钟。 |\n| sec | number | 否 | 可选，一个 0 到 59 的整数，表示秒数。如果指定了 sec 参数，则必须同时指定 min 参数。 |\n| ms | number | 否 | 可选，一个 0 到 999 的数字，表示微秒数，如果指定了 ms 参数，则必须同时指定 min 和 sec 参数。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setDate":{"name":"### setDate(date)","description":"\n根据本地时间来指定一个日期对象的天数。如果 dayValue 超出了月份的合理范围，setDate 将会相应地更新 Date 对象。例如，如果为 dayValue 指定 0，那么日期就会被设置为上个月的最后一天。如果 dayValue 被设置为负数，日期会设置为上个月最后一天往前数这个负数绝对值天数后的日期。-1 会设置为上月最后一天的前一天（译者注：例如当前为 4 月，如果 setDate(-2),则为 3 月 29 日）","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| date | number | 是 | 一个整数，表示该月的第几天。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setMonth":{"name":"### setMonth(month, date?)","description":"\n根据本地时间为一个日期对象设置月份。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| month | number | 是 | 必填参数，介于 0 到 11 之间的整数（表示一月到十二月）。 |\n| date | number | 否 | 可选参数，从 1 到 31 之间的整数，表示月份中的第几天。0 为上个月最后一天。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 基于 1 January 1970 00:00:00 UTC 开始计算的毫秒数。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"setFullYear":{"name":"### setFullYear(year, month?, date?)","description":"\n根据本地时间为一个日期对象设置年份。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| year | number | 是 | 指定年份的整数值，例如 1995。 |\n| month | number | 否 | 可选参数：一个 0 到 11 之间的整数值，表示从一月到十二月。 |\n| date | number | 否 | 可选参数：一个 1 到 31 之间的整数值，表示月份中的第几天。如果你指定了 date 参数，就必须同时指定 month。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"now":{"name":"### now()","description":"\n返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"RegExp":{"flags":{"name":"### flags","description":"\n返回一个字符串，由当前正则表达式对象的标志组成。此属性是一个只读属性\n此字符串中的字符按以下顺序排序和连接:\n\n   - \"g\" for global\n   - \"i\" for ignoreCase\n   - \"m\" for multiline\n   - \"u\" for unicode\n   - \"y\" for sticky\n\n如果没有设置标志，则该值为空字符串。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"source":{"name":"### source","description":"\n返回一个值为当前正则表达式对象的模式文本的字符串，该字符串不会包含正则字面量两边的斜杠以及任何的标志字符。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"global":{"name":"### global","description":"\n表明正则表达式是否使用了 \"g\" 标志。global 是一个正则表达式实例的只读属性。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"ignoreCase":{"name":"### ignoreCase","description":"\n表明正则表达式是否使用了 \"i\" 标志。ignoreCase 是正则表达式实例的只读属性。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"multiline":{"name":"### multiline","description":"\n表明正则表达式是否使用了 \"m\" 标志。multiline 是正则表达式实例的一个只读属性。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"lastIndex":{"name":"### lastIndex","description":"\n正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"exec":{"name":"### exec(string)","description":"\n在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| string | string | 是 | 要匹配正则表达式的字符串。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| RegExpExecArray \\| null | 如果匹配失败，exec() 方法返回 null，并将正则表达式的 lastIndex 重置为 0。如果匹配成功，exec() 方法返回一个数组，并更新正则表达式对象的 lastIndex 属性。完全匹配成功的文本将作为返回数组的第一项，从第二项起，后续每项都对应一个匹配的捕获组。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"test":{"name":"### test(string)","description":"\n执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| string | string | 是 | 用来与正则表达式匹配的字符串。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果正则表达式与指定的字符串匹配，返回true；否则false。如果正则表达式设置了全局标志，test() 的执行会改变正则表达式 lastIndex属性。连续的执行test()方法，后续的执行将会从 lastIndex 处开始匹配字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"JSON":{"parse":{"name":"### parse(text, reviver?)","description":"\nJSON.parse() 方法用来解析 JSON 字符串，构造由字符串描述的 JavaScript 值或对象。提供可选的 reviver 函数用以在返回之前对所得到的对象执行变换 (操作)。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| text | string | 是 | 要被解析成 JavaScript 值的字符串 |\n| reviver | (this : any, key : string, value : any) =\\> any | 否 | \\[可选\\] 转换器，如果传入该参数 (函数)，可以用来修改解析生成的原始值，调用时机在 parse 函数返回之前。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| any | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"parseObject":{"name":"### parseObject(text)","description":"\nJSON.parseObject() 方法用来解析 JSON 字符串，构造由字符串描述的对象。\n如果输入的是一个合法的json对象，返回一个对应的UTSJSONObject，如果是json array 或者其他格式的字符串返回null","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| text | string | 是 | 要被解析成 JavaScript 值的字符串 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| UTSJSONObject \\| null | 返回一个UTSJSONObjet 或者 null | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"parseObject_1":{"name":"### parseObject(text)","description":"\nJSON.parseObject() 方法用来解析 JSON 字符串，构造由字符串描述的对象，该对象的类型由泛型参数T决定\n如果输入的是一个合法的json对象，返回一个对应的T对象，如果是json array 或者其他格式的字符串返回null","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| text | string | 是 | 要被解析成 JavaScript 值的字符串 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| T \\| null | 返回一个T类型对象 或者 null | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | 3.9.0 | 3.9.0 | 9.0 | 3.9.0 | x |\n","itemType":"method"},"parseArray":{"name":"### parseArray(text)","description":"\nJSON.parseArray() 方法用来解析 JSON 字符串，构造由字符串描述的数组。数组元素类型为any\n如果输入的是一个合法的json数组，返回一个对应的Array，如果是json object 或者其他格式的字符串返回null","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| text | string | 是 | 要被解析成 JavaScript 值的字符串 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Array\\<any\\> \\| null | 返回一个Array 或者 null | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"parseArray_1":{"name":"### parseArray(text)","description":"\nJSON.parseArray() 方法用来解析 JSON 字符串，构造由字符串描述的数组。数组元素类型由泛型T决定\n如果输入的是一个合法的json数组，返回一个对应的Array，如果是json object 或者其他格式的字符串返回null","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| text | string | 是 | 要被解析成 JavaScript 值的字符串 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| Array\\<T\\> \\| null | 返回一个Array 或者 null | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"stringify":{"name":"### stringify(value, replacer?, space?)","description":"\nJSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | any | 是 | 将要序列化成 一个 JSON 字符串的值。 |\n| replacer | (this : any, key : string, value : any) =\\> any | 否 | 如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。 app-ios/app-android `暂不支持` |\n| space | string \\| number | 否 | 指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为 10。该值若小于 1，则意味着没有空格；如果该参数为字符串（当字符串长度超过 10 个字母，取其前 10 个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。 app-ios/app-android `暂不支持` |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| string | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | 3.9.0 |\n","itemType":"method"},"stringify_1":{"name":"### stringify(value, replacer?, space?)","description":"\nJSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | any | 是 | 将要序列化成 一个 JSON 字符串的值。 |\n| replacer | (number \\| string)\\[\\] \\| null | 否 | 如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。 app-ios/app-android `暂不支持` |\n| space | string \\| number | 否 | 指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为 10。该值若小于 1，则意味着没有空格；如果该参数为字符串（当字符串长度超过 10 个字母，取其前 10 个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。 app-ios/app-android `暂不支持` |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| string | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | 3.9.0 |\n","itemType":"method"}},"Array":{"length":{"name":"### length","description":"\nlength 是 Array 的实例属性，表示该数组中元素的个数。该值是一个无符号 32 位整数，并且其数值总是大于数组最大索引。","param":"","returnValue":"","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"find":{"name":"### find(predicate, thisArg?)","description":"\nfind() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 null。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| predicate | (value : T, index : number, obj : T\\[\\]) =\\> value is S | 是 | 为数组中的每个元素执行的函数。它应该返回一个真值来表示已经找到了匹配的元素。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| S \\| null | 数组中第一个满足所提供测试函数的元素的值，否则返回 null | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"findIndex":{"name":"### findIndex(predicate, thisArg?)","description":"\nfindIndex() 方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| predicate | (value : T, index : number, obj : T\\[\\]) =\\> unknown | 是 | 为数组中的每个元素执行的函数。它应该返回一个真值以指示已找到匹配元素，否则返回一个假值。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 数组中第一个满足测试条件的元素的索引。否则返回 -1。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"fill":{"name":"### fill(value, start?, end?)","description":"\nfill() 方法用一个固定值填充一个数组中从起始索引（默认为 0）到终止索引（默认为 array.length）内的全部元素。它返回修改后的数组。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | T | 是 | 用来填充数组元素的值。注意所有数组中的元素都将是这个确定的值：如果 value 是个对象，那么数组的每一项都会引用这个元素。 |\n| start | number | 否 | 基于零的索引，从此开始填充，转换为整数。 |\n| end | number | 否 | 基于零的索引，在此结束填充，转换为整数。fill() 填充到但不包含 end 索引。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| this | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"copyWithin":{"name":"### copyWithin(target, start?, end?)","description":"\ncopyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| target | number | 是 | 序列开始替换的目标位置，以 0 为起始的下标表示，且将被转换为整数 |\n| start | number | 否 | 要复制的元素序列的起始位置，以 0 为起始的下标表示，且将被转换为整数 |\n| end | number | 否 | 要复制的元素序列的结束位置，以 0 为起始的下标表示，且将被转换为整数。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| this | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"pop":{"name":"### pop()","description":"\npop() 方法从数组中删除最后一个元素，并返回该元素的值。此方法会更改数组的长度。\n","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| T \\| null | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"push":{"name":"### push(items)","description":"\npush() 方法将指定的元素添加到数组的末尾，并返回新的数组长度。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| items | T\\[\\] | 是 | 添加到数组末尾的元素。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| number | 调用方法的对象的新 length 属性。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"concat":{"name":"### concat(items)","description":"\nconcat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。\n","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| items | ConcatArray\\<T\\>\\[\\] | 是 | 数组和/或值，将被合并到一个新的数组中。如果省略了所有 valueN 参数，则 concat 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| T\\[\\] | 新的 Array 实例。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"concat_1":{"name":"### concat(items)","description":"\nconcat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| items | (T \\| ConcatArray\\<T\\>)\\[\\] | 是 | 数组和/或值，将被合并到一个新的数组中。如果省略了所有 valueN 参数，则 concat 会返回调用此方法的现存数组的一个浅拷贝。详情请参阅下文描述。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| T\\[\\] | 新的 Array 实例。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"join":{"name":"### join(separator?)","description":"\njoin() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| separator | string | 否 | 指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略，数组元素用逗号（,）分隔。如果 separator 是空字符串（\"\"），则所有元素之间都没有任何字符。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| string | 一个所有数组元素连接的字符串。如果 arr.length 为 0，则返回空字符串。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"reverse":{"name":"### reverse()","description":"\nreverse() 方法就地反转数组中的元素，并返回同一数组的引用。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。换句话说，数组中的元素顺序将被翻转，变为与之前相反的方向。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| T\\[\\] | 原始数组反转后的引用。注意，数组是就地反转的，并且没有复制。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"shift":{"name":"### shift()","description":"\nshift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。","param":"","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| T \\| null | 从数组中删除的元素；如果数组为空则返回 null。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"slice":{"name":"### slice(start?, end?)","description":"\nslice() 方法返回一个新的数组对象，这一对象是一个由 start 和 end 决定的原数组的浅拷贝（包括 start，不包括 end），其中 start 和 end 代表了数组元素的索引。原始数组不会被改变。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| start | number | 否 | 提取起始处的索引（从 0 开始），会转换为整数。 |\n| end | number | 否 | 提取终止处的索引（从 0 开始），会转换为整数。slice() 会提取到但不包括 end 的位置。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| T\\[\\] | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"sort":{"name":"### sort(compareFn?)","description":"\nsort() 方法就地对数组的元素进行排序，并返回对相同数组的引用。默认排序是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| compareFn | (a : T, b : T) =\\> number | 否 | 定义排序顺序的函数。返回值应该是一个数字，其正负性表示两个元素的相对顺序。该函数使用以下参数调用： a:第一个用于比较的元素。不会是 null。 b:第二个用于比较的元素。不会是 null。 如果省略该函数，数组元素会被转换为字符串，然后根据每个字符的 Unicode 码位值进行排序。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| this | 经过排序的原始数组的引用。注意数组是就地排序的，不会进行复制。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"splice":{"name":"### splice(start, deleteCount, items)","description":"\nsplice() 方法通过移除或者替换已存在的元素和/或添加新元素就地改变一个数组的内容。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| start | number | 是 | 从 0 开始计算的索引，表示要开始改变数组的位置，它会被转换成整数。 |\n| deleteCount | number | 是 | 一个整数，表示数组中要从 start 开始删除的元素数量。 |\n| items | T\\[\\] | 是 | - |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| T\\[\\] | 一个包含了删除的元素的数组。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"unshift":{"name":"### unshift(items)","description":"\nunshift() 方法将指定元素添加到数组的开头，并返回数组的新长度。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| items | T\\[\\] | 是 | 添加到 arr 开头的元素。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"indexOf":{"name":"### indexOf(searchElement, fromIndex?)","description":"\nindexOf() 方法返回数组中第一次出现给定元素的下标，如果不存在则返回 -1。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchElement | T | 是 | 数组中要查找的元素。 |\n| fromIndex | number | 否 | 开始搜索的索引（从零开始），会转换为整数。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"lastIndexOf":{"name":"### lastIndexOf(searchElement, fromIndex?)","description":"\nlastIndexOf() 方法返回数组中给定元素最后一次出现的索引，如果不存在则返回 -1。该方法从 fromIndex 开始向前搜索数组。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| searchElement | T | 是 | 被查找的元素。 |\n| fromIndex | number | 否 | 以 0 起始的索引，表明反向搜索的起始位置，会被转换为整数。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"every":{"name":"### every(predicate, thisArg?)","description":"\nevery() 方法测试一个数组内的所有元素是否都能通过指定函数的测试。它返回一个布尔值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| predicate | (value : T, index : number, array : T\\[\\]) =\\> unknown | 是 | 为数组中的每个元素执行的函数。它应该返回一个真值以指示元素通过测试，否则返回一个假值。该函数被调用时将传入以下参数： value:数组中当前正在处理的元素。 index:正在处理的元素在数组中的索引。 array:调用了 every() 的数组本身。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| boolean | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"some":{"name":"### some(predicate, thisArg?)","description":"\nsome() 方法测试数组中是否至少有一个元素通过了由提供的函数实现的测试。如果在数组中找到一个元素使得提供的函数返回 true，则返回 true；否则返回 false。它不会修改数组。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| predicate | (value : T, index : number, array : T\\[\\]) =\\> unknown | 是 | 为数组中的每个元素执行的函数。它应该返回一个真值以指示元素通过测试，否则返回一个假值。该函数被调用时将传入以下参数： value:数组中当前正在处理的元素。 index:正在处理的元素在数组中的索引。 array:调用了 some() 的数组本身。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果回调函数对数组中至少一个元素返回一个真值，则返回 true。否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"forEach":{"name":"### forEach(callbackfn, thisArg?)","description":"\nforEach() 方法对数组的每个元素执行一次给定的函数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| callbackfn | (value : T, index : number, array : T\\[\\]) =\\> void | 是 | 为数组中每个元素执行的函数。并会丢弃它的返回值。该函数被调用时将传入以下参数： value:数组中正在处理的当前元素。 index:数组中正在处理的当前元素的索引。 array:调用了 forEach() 的数组本身。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| void | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"map":{"name":"### map(callbackfn, thisArg?)","description":"\nmap() 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| callbackfn | (value : T, index : number, array : T\\[\\]) =\\> U | 是 | 为数组中的每个元素执行的函数。它的返回值作为一个元素被添加为新数组中。该函数被调用时将传入以下参数： value:数组中当前正在处理的元素。 index:正在处理的元素在数组中的索引。 array:调用了 map() 的数组本身。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| U\\[\\] | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"filter":{"name":"### filter(predicate, thisArg?)","description":"\nfilter() 方法创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| predicate | (value : T, index : number, array : T\\[\\]) =\\> unknown | 是 | 为数组中的每个元素执行的函数。它应该返回一个真值以将元素保留在结果数组中，否则返回一个假值。该函数被调用时将传入以下参数： value:数组中当前正在处理的元素。 index:正在处理的元素在数组中的索引。 array:调用了 filter() 的数组本身。 |\n| thisArg | any | 否 | 执行 callbackFn 时用作 this 的值 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| T\\[\\] | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"reduce":{"name":"### reduce(callbackfn)","description":"\nreduce() 方法对数组中的每个元素按序执行一个提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| callbackfn | (previousValue : T, currentValue : T, currentIndex : number, array : T\\[\\]) =\\> T | 是 | 为数组中每个元素执行的函数。其返回值将作为下一次调用 callbackFn 时的 accumulator 参数。对于最后一次调用，返回值将作为 reduce() 的返回值。该函数被调用时将传入以下参数： previousValue:上一次调用 callbackFn 的结果。在第一次调用时，如果指定了 initialValue 则为指定的值，否则为 array\\[0\\] 的值。 currentValue:当前元素的值。在第一次调用时，如果指定了 initialValue，则为 array\\[0\\] 的值，否则为 array\\[1\\]。 currentIndex:currentValue 在数组中的索引位置。在第一次调用时，如果指定了 initialValue 则为 0，否则为 1 array:调用了 reduce() 的数组本身。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| T | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"reduceRight":{"name":"### reduceRight(callbackfn)","description":"\nreduceRight() 方法对累加器（accumulator）和数组的每个值（按从右到左的顺序）应用一个函数，并使其成为单个值。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| callbackfn | (previousValue : T, currentValue : T, currentIndex : number, array : T\\[\\]) =\\> T | 是 | 为数组中的每个元素执行的函数。其返回值将作为下一次调用 callbackFn 时的 accumulator 参数。对于最后一次调用，返回值将成为 reduceRight() 的返回值。该函数被调用时将传入以下参数： previousValue:上一次调用 callbackFn 的结果。在第一次调用时，如果指定了 initialValue 则为指定的值，否则为数组最后一个元素的值。 currentValue:数组中当前正在处理的元素。 index:正在处理的元素在数组中的索引。 array:调用了 reduceRight() 的数组本身。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| T | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"isArray":{"name":"### isArray(arg)","description":"\nArray.isArray() 静态方法用于确定传递的值是否是一个 Array。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| arg | any | 是 | 需要检测的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| arg is any\\[\\] | 如果 value 是 Array，则为 true；否则为 false。如果 value 是 TypedArray 实例，则总是返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"Map":{"size":{"name":"### size","description":"","param":"","returnValue":"**返回值** \n\nMap 对象的成员数量。","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"clear":{"name":"### clear()","description":"\n移除 Map 对象中的所有元素。","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| void | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"delete":{"name":"### delete(key)","description":"\n用于移除 Map 对象中指定的元素。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| key | K | 是 | 要从 Map 对象中删除的元素的键。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果 Map 对象中的元素存在并已被移除，则为 true；如果该元素不存在，则为 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"forEach":{"name":"### forEach(callbackfn, thisArg?)","description":"\n按照插入顺序依次对 Map 中每个键/值对执行一次给定的函数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| callbackfn | (value : V, key : K, map : Map\\<K, V\\>) =\\> void | 是 | Map 中每个元素所要执行的函数。它具有如下的参数： value: 每个迭代的值。 key: 每个迭代的键。 map: 正在迭代的 Map。 |\n| thisArg | any | 否 | 在 callbackfn 执行中使用的 this 的值。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| void | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"get":{"name":"### get(key)","description":"\n从 Map 对象返回指定的元素。如果与所提供的键相关联的值是一个对象，那么你将获得该对象的引用，对该对象所做的任何更改都会有效地在 Map 对象中修改它。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| key | K | 是 | 从 Map 对象返回的元素的键。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| V \\| null | 与指定键相关联的元素，如果键在 Map 对象中找不到，则返回 null。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"has":{"name":"### has(key)","description":"\n返回一个布尔值，指示具有指定键的元素是否存在。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| key | K | 是 | 用于测试 Map 对象中是否存在的元素的键。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果 Map 对象中存在具有指定键的元素，则返回 true；否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"set":{"name":"### set(key, value)","description":"\n为 Map 对象添加或更新一个指定了键（key）和值（value）的（新）键值对。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| key | K | 是 | 要添加到 Map 对象的元素的键。该值可以是任何数据类型（任何原始值或任何类型的对象）。 |\n| value | V | 是 | 要添加到 Map 对象的元素的值。该值可以是任何数据类型（任何原始值或任何类型的对象）。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| this | Map 对象 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"Set":{"size":{"name":"### size","description":"\n返回 Set 对象中（唯一的）元素的个数。","param":"","returnValue":"**返回值** \n\n返回 Set 对象中（唯一的）元素的个数。","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"prop"},"add":{"name":"### add(value)","description":"\n如果 Set 对象中没有具有相同值的元素，则 add() 方法将插入一个具有指定值的新元素到 Set 对象中。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | T | 是 | 要添加到 Set 对象的元素的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| this | Set 对象本身。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"clear":{"name":"### clear()","description":"\n移除 Set 对象中所有元素。","param":"","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| void | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"delete":{"name":"### delete(value)","description":"\n从 Set 对象中删除指定的值（如果该值在 Set 中）。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | T | 是 | 要从 Set 中移除的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 成功删除返回 true，否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | 3.9.0 |\n","itemType":"method"},"forEach":{"name":"### forEach(callbackfn, thisArg?)","description":"\n对 Set 对象中的每个值按插入顺序执行一次提供的函数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| callbackfn | (value : T, value2 : T, set : Set\\<T\\>) =\\> void | 是 | 为集合中每个元素执行的回调函数，该函数接收三个参数：value、key: Set 中正在处理的当前元素。因为 Set 中没有键，所以 value 会被共同传递给这两个参数。set: 调用 forEach() 的 Set 对象。 |\n| thisArg | any | 否 | 值在执行 callbackFn 时作为 this 使用。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| void | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"has":{"name":"### has(value)","description":"\n返回一个布尔值来指示对应的值是否存在于 Set 对象中。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| value | T | 是 | 要测试是否存在于 Set 对象中的值。 |","returnValue":"**返回值** \n\n| 类型 | 描述 |\n| :-| :-|\n| boolean | 如果 Set 对象中存在具有指定值的元素，则返回 true；否则返回 false。 | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}},"Console":{},"Global":{"parseInt":{"name":"### parseInt(string, radix?)","description":"\nparseInt(string, radix) 解析一个字符串并返回指定基数的十进制整数，radix 是 2-36 之间的整数，表示被解析字符串的基数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| string | string | 是 | 要被解析的值。如果参数不是一个字符串，则将其转换为字符串 (使用 ToString抽象操作)。字符串开头的空白符将会被忽略。 |\n| radix | number | 否 | 从 2 到 36 的整数，表示进制的基数。例如指定 16 表示被解析值是十六进制数。如果超出这个范围，将返回 NaN。假如指定 0 或未指定，基数将会根据字符串的值进行推算。注意，推算的结果不会永远是默认值 10！文章后面的描述解释了当参数 radix 不传时该 函数的具体行为。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"},"parseFloat":{"name":"### parseFloat(string)","description":"\nparseFloat() 函数解析一个参数（必要时先转换为字符串）并返回一个浮点数。","param":"**参数** \n\n| 参数名 | 参数类型 | 是否必填 | 描述 |\n| :-| :-| :-| :-|\n| string | string | 是 | 需要被解析成为浮点数的值。 |","returnValue":"**返回值** \n\n| 类型 |\n| :-|\n| number | \n","compatibility":"**兼容性** \n\n| 安卓系统版本 | 安卓 uni-app | 安卓 uni-app-x | iOS 系统版本 | iOS uni-app | iOS uni-app-x |\n| :-| :-| :-| :-| :-| :-|\n| 4.4 | √ | 3.9.0 | 9.0 | √ | x |\n","itemType":"method"}}}